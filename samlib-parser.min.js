

define('book',['jquery', 'underscore'], function ($, _) {

    function Book(bookUrl, immediateLoad) {
        this.url = bookUrl;
        this.ready = $.Deferred();
        this._info = {};
        immediateLoad = _(immediateLoad).isUndefined() ? true : immediateLoad;

        if (immediateLoad) {
            this.load();
        }
    }

    var result = {
        pageContent: '',

        load: function () {
            var _this = this;
            $.get(_this.url).done(function (resultAsString, result, xhr) {
                _this.parse(resultAsString);
            }).fail(function (xhr) {
                _this.ready.reject(xhr);
            })
        },

        parse: function (pageContent) {
            var _this = this;
            this.pageContent = pageContent;

            var re = {
                authorName: /<div align=right><h3>([^]+?): <small>/gi,
                authorUrl: /<div align=right><h3>[^]+?: <small><a href=([^]+?)>/gi,
                title: /<center><h2>([^]+?)<\/h2>[^]+?<!------- Первый блок ссылок ------------->/gi,
                literaryForm: /<li><a href=\/type\/[^]+?>([^]+?)<\/a>/gi,
                content: /<!----------- Собственно произведение --------------->([^]+?)<!--------------------------------------------------->/gi,
                genre: /<a href="\/janr\/[^]+?">([^]+?)<\/a>/gi,
                description: /<ul><small><li><\/small><b>Аннотация:<\/b><br><font color="#555555"><i>([^]+?)<\/i><\/font><\/ul>/gi,
                group: /<li> <a href=index.shtml#gr[^]+?>([^]+?)<\/a>/gi
            }

            _(re).each(function (re, title) {
                var match = re.exec(pageContent);
                if (match) {
                    var info = {};
                    info[title] = _.trim(match[1]);
                    _this.info(info);
                }
            });

            this.ready.resolve(this);
        },

        info: function (data, replace) {
            data = data || false;
            if (data) {
                replace = replace || false;
                if (replace) {
                    this._info = data;
                } else {
                    _.extend(this._info, data);
                }
            }
            return this._info;
        }
    };

    _.extend(Book.prototype, result);

    return Book;

});


define('bookSeries',['jquery', 'underscore', 'book'], function ($, _, Book) {

    function BookSeries(bookSeriesUrl, immediateLoad) {
        this.url = bookSeriesUrl;
        this._info = {separatePage: true};
        this.ready = $.Deferred();

        immediateLoad = _(immediateLoad).isUndefined() ? true : immediateLoad;

        if (immediateLoad) {
            this.load();
        }

    }

    var result = {
        pageContent: '',

        load: function () {
            var _this = this;
            $.get(_this.url).done(function (resultAsString, result, xhr) {
                _this.parse(resultAsString);
            }).fail(function (xhr) {
                _this.ready.reject(xhr);
            })
        },
        parse: function (pageContent) {
            var _this = this;
            this.pageContent = pageContent;

            var rootUrl = this.url;
            if (rootUrl[rootUrl.length - 1] != '/') {
                rootUrl = rootUrl.split('/');
                rootUrl.pop();
                rootUrl = rootUrl.join('/');
            }
            if (this.info().separatePage) {
                var annotationRe = /<small><b>Аннотация<\/b>: <i>([^]+?)<\/i>/ig;
                var annotation = annotationRe.exec(pageContent);
                annotation = annotation ? annotation[1] : '';
                this.info({
                    annotation: _.trim(annotation)
                })

                var booksAreaRe = /<!-------- вместо <body> вставятся ссылки на произведения! ------>([^]+?)<!--------- Подножие ------------------------------->/ig;
                var allBooks = booksAreaRe.exec(pageContent);
                allBooks = allBooks[1];

                var authorInfoRe = /<center>[^]+?<h3>([^]+?):<br>[^]+?<font color="#cc5555">([^]+?)<\/font>/ig;
                var info = authorInfoRe.exec(pageContent);
                this.info({
                    authorName: info[1],
                    title: _(info[2]).trim()
                });
            } else {
                var description = pageContent.substring(0, pageContent.search('<DL>'));
                var annotationRe = /<font color=#393939 size=-1><i>([^]+?)<\/i>/ig;
                var annotation = annotationRe.exec(description);
                annotation = annotation ? annotation[1] : '';
                this.info({
                    annotation: _.trim(annotation)
                });

                var allBooks = pageContent;
            }

            var books = [];
            var booksRe = /<DL><DT><li>[^]*?<A HREF=([^]+?)><b>([^]+?)<\/b><\/A> &nbsp; <b>([\d]+?)k<\/b>[^]+?<small>(Оценка:[^]+?&nbsp;([^]+?)|([^]+?))(<A|<\/s)([^]+?)(<DD><font color="#555555">([^]+?)<\/font>[^]+?|)<\/DL>/ig;
            allBooks.replace(booksRe, function (match, link, title, size, genre1, genre2, n, n2, n3, n4, annotation) {
                link = rootUrl + "/" + link;

                var genre = _(genre2).isUndefined() ? genre1 : genre2;
                var book = new Book(link, false);
                book.info({
                    title: title,
                    size: size,
                    genres: _.trim(genre).split(',').map(function (elem) {
                        return _.trim(elem);
                    }),
                    annotation: annotation
                });

                books.push(book);
            });

            this.info({
                books: books
            });

            this.ready.resolve(this);
        },

        info: function (data, replace) {
            data = data || false;
            if (data) {
                replace = replace || false;
                if (replace) {
                    this._info = data;
                } else {
                    _.extend(this._info, data);
                }
            }
            return this._info;
        }
    };

    _.extend(BookSeries.prototype, result);

    return BookSeries;

});


define('author',['jquery', 'bookSeries', 'underscore'], function ($, BookSeries, _) {

    function Author(authorUrl, immediateLoad) {
        this.url = authorUrl;
        this.ready = $.Deferred();
        this._info = {}

        immediateLoad = _(immediateLoad).isUndefined() ? true : immediateLoad;
        if (immediateLoad) {
            this.load();
        }
    }

    var result = {
        pageContent: '',

        load: function () {
            var _this = this;
            $.get(_this.url).done(function (resultAsString, result, xhr) {
                _this.parse(resultAsString);
            }).fail(function (xhr) {
                _this.ready.reject(xhr);
            });
            return this.ready;
        },

        parse: function (pageContent) {
            var _this = this;
            this.pageContent = pageContent;

            this._info = {
                name: "",
                description: "",

                lastUpdate: "",
                totalBookSize: 0,
                totalBooks: 0,

                bookSeries: []
            };

            var authorInfoRe = /<center>[^]+?<h3[^>]*?>([^]+?):<br>[^]+?<font color="[^"]*?">([^]+?)<\/font>/gi;
            var authorInfo = authorInfoRe.exec(pageContent);

            if (authorInfo === null) {
                throw Error("Incorrect author page! [" + this.url + "]");
            }
            this._info.name = authorInfo[1];
            this._info.title = authorInfo[1];
            this._info.description = authorInfo[2];

            var generalInfoRe = /<li><b><a href=\/long.shtml><font color=#393939>Обновлялось:<\/font><\/a><\/b> ([\d]{2}\/[\d]{2}\/[\d]{4})[^]+?<li><b><a href=\/rating\/size\/><font color=#393939>Об[ъь]ем:<\/font><\/a><\/b> ([\d]*?)k\/([\d]*?)\s/gi;
            var generalInfo = generalInfoRe.exec(pageContent);

            if (generalInfo === null) {
                throw Error("Incorrect author page! [" + this.url + "]");
            }

            this._info.lastUpdate = generalInfo[1];
            this._info.totalBookSize = generalInfo[2];
            this._info.totalBooks = generalInfo[3];

            var books = pageContent.match(/<!-------- вместо <body> вставятся ссылки на произведения! ------>([^]+?)<!--------- Подножие ------------------------------->/);
            books = books[0] + '</small><p><font size=+1> ';

            var bookSeriesRe = /<a name=[^]+?>([^]+?)(<gr0>|<\/a>)([^]+?)<\/small><p><font size=\+1>/gi;

            var bookSeries = [];
            var bookInfoRe = /<a href="([^]+?)"><font color="#393939">([^]+?)<\/font>/ig;
            books.replace(bookSeriesRe, function (match, booksTitle, delimiter, unfilteredBooks) {
                var info = match.match(bookInfoRe);
                var separatePage = false;
                var url = _this.url;
                if (info) {
                    booksTitle = info[2];
                    if (info[1].indexOf('/type/') !== -1) {
                        url = _this.url + '/' + info[1];
                        separatePage = true;
                    }
                }

                var series = new BookSeries(url, false);
                series.info({
                    title: _.trim(booksTitle, ":"),
                    authorName: _this.info().name,
                    author: _this,
                    separatePage: separatePage
                });

                if (!separatePage) {
                    series.parse('<!-------- вместо <body> вставятся ссылки на произведения! ------>' + unfilteredBooks + '<!--------- Подножие ------------------------------->');
                }
                bookSeries.push(
                    series
                );
                return match;
            });

            this.info({
                bookSeries: bookSeries
            });

            this.ready.resolve(this);
        },

        info: function (data, replace) {
            data = data || false;
            if (data) {
                replace = replace || false;
                if (replace) {
                    this._info = data;
                } else {
                    _.extend(this._info, data);
                }
            }
            return this._info;
        }
    };

    _.extend(Author.prototype, result);

    return Author;

});


define('authorIndex',['jquery', 'underscore', 'author'], function ($, _, Author) {

    function AuthorIndex(authorIndexUrl, immediateLoad) {
        this.url = authorIndexUrl;
        this.ready = $.Deferred();
        this._info = {};

        immediateLoad = _(immediateLoad).isUndefined() ? true : immediateLoad;
        if (immediateLoad) {
            result.load();
        }
    }

    var result = {
        pageContent: '',

        load: function () {
            var _this = this;
            $.get(_this.url).done(function (resultAsString, result, xhr) {
                _this.parse(resultAsString);
            }).fail(function (xhr) {
                _this.ready.reject(xhr);
            });
        },

        parse: function (pageContent) {
            var _this = this;
            this.pageContent = pageContent;

            var authorsRe = /<DL><a href=([^]+?)>([^]+?)<\/a> "([^]+?)"\(([\d]*?)k,([^]+?)\)/gi;
            var authors = [];
            pageContent.replace(authorsRe, function (match, link, name, announce, size, booksCount) {
                var author = new Author('http://samlib.ru' + link, false);
                author.info({
                    name: name,
                    totalBooks: booksCount,
                    totalBookSize: size,
                    description: announce
                });
                authors.push(author);

                return match;
            });

            this.info({
                authors: authors
            });

            this.ready.resolve();
        },

        info: function (data, replace) {
            data = data || false;
            if (data) {
                replace = replace || false;
                if (replace) {
                    this._info = data;
                } else {
                    _.extend(this._info, data);
                }
            }
            return this._info;
        }
    };

    _.extend(AuthorIndex.prototype, result);

    return AuthorIndex;
});


define('literaryForm',['jquery', 'underscore'], function ($, _) {

    function LiteraryForm(literaryFormUrl, immediateLoad) {
        this.url = literaryFormUrl;
        this.ready = $.Deferred();
        this._info = {};
        immediateLoad = _(immediateLoad).isUndefined() ? true : immediateLoad;

        if (immediateLoad) {
            this.load();
        }
    }

    var result = {
        pageContent: '',

        load: function () {
            var _this = this;
            $.get(_this.url).done(function (resultAsString, result, xhr) {
                _this.parse(resultAsString);
            }).fail(function (xhr) {
                _this.ready.reject(xhr);
            })
        },

        parse: function (pageContent) {
            this.pageContent = pageContent;
            //TODO: standalone parsing
            this.ready.resolve(this);
        },

        info: function (data, replace) {
            data = data || false;
            if (data) {
                replace = replace || false;
                if (replace) {
                    this._info = data;
                } else {
                    _.extend(this._info, data);
                }
            }
            return this._info;
        }
    };

    _.extend(LiteraryForm.prototype, result);

    return LiteraryForm;
});


define('genre',['jquery', 'underscore'], function ($, _) {

    function Genre(genreUrl, immediateLoad) {
        this.url = genreUrl;
        this.ready = $.Deferred();
        this._info = {};
        immediateLoad = _(immediateLoad).isUndefined() ? true : immediateLoad;

        if (immediateLoad) {
            this.load();
        }
    }

    var result = {
        pageContent: '',

        load: function () {
            var _this = this;
            $.get(_this.url).done(function (resultAsString, result, xhr) {
                _this.parse(resultAsString);
            }).fail(function (xhr) {
                _this.ready.reject(xhr);
            })
        },

        parse: function (pageContent) {
            this.pageContent = pageContent;
            //TODO: standalone parsing
            this.ready.resolve(this);
        },

        info: function (data, replace) {
            data = data || false;
            if (data) {
                replace = replace || false;
                if (replace) {
                    this._info = data;
                } else {
                    _.extend(this._info, data);
                }
            }
            return this._info;
        }
    };

    _.extend(Genre.prototype, result);

    return Genre;
});


define(
    'mainpage',['jquery', 'underscore', 'authorIndex', 'literaryForm', 'genre'],
    function ($, _, AuthorIndex, LiteraryForm, Genre) {

        function MainPage(mainPageUrl, immediateLoad) {
            mainPageUrl = _(mainPageUrl).isUndefined() ? 'http://samlib.ru/' : mainPageUrl;
            immediateLoad = _(immediateLoad).isUndefined() ? true : immediateLoad;
            this.url = mainPageUrl;
            this.ready = $.Deferred();
            this._info = {};

            if (immediateLoad) {
                this.load();
            }
        }

        var result = {
            pageContent: '',

            load: function () {
                var _this = this;
                this.ready = $.Deferred();
                $.get(_this.url).done(function (resultAsString, result, xhr) {
                    _this.parse(resultAsString);
                }).fail(function (xhr) {
                    _this.ready.reject(xhr);
                })
            },

            parse: function (pageContent) {
                var _this = this;
                this.pageContent = pageContent;

                //Genres
                var genresRe = /<a href=(\/janr\/index_janr_[\d]+?\-[\d]+?\.shtml)>([^]+?)<\/a> \((\d+?)\)/gi;
                var genres = [];
                pageContent.replace(genresRe, function (match, link, title, booksCount) {
                    var genre = new Genre(_this.url + link, false);
                    genre.info({
                        title: title,
                        booksCount: booksCount
                    });
                    genres.push(genre);

                    return match;
                });

                //AuthorIndex
                var index = pageContent.match(/<!------------------ Тело индекса -------------------->([^]+?)<p>/gi);
                var authorIndexRe = /<a href=([^]+?)>([^]+?)<\/a>/gi;
                var authorIndexes = [];
                index[0].replace(authorIndexRe, function (match, link, title) {
                    var authorIndex = new AuthorIndex(_this.url + link, false);
                    authorIndex.info({
                        title: title
                    });
                    authorIndexes.push(authorIndex);

                    return match;
                });

                //Literary forms
                var literaryFormsRe = /<a href=(\/type\/index_type_[\d]+?\-[\d]+?\.shtml)>([^]+?)<\/a> \((\d+?)\)/gi;
                var literaryForms = [];
                pageContent.replace(literaryFormsRe, function (match, link, title, booksCount) {
                    var literaryForm = new LiteraryForm(_this.url + link, false);
                    literaryForm.info({
                        title: title,
                        booksCount: booksCount
                    });
                    literaryForms.push(literaryForm);

                    return match;
                });

                this.info({
                    genres: genres,
                    authorIndexes: authorIndexes,
                    literaryForms: literaryForms
                });

                this.ready.resolve(this);
            },

            info: function (data, replace) {
                data = data || false;
                if (data) {
                    replace = replace || false;
                    if (replace) {
                        this._info = data;
                    } else {
                        _.extend(this._info, data);
                    }
                }
                return this._info;
            }
        };

        _.extend(MainPage.prototype, result);

        return MainPage;
    }
);


define(
    'samlib',['jquery', 'underscore', 'mainpage', 'authorIndex', 'literaryForm', 'genre', 'book', 'bookSeries', 'author'],
    function ($, _, MainPage, AuthorIndex, LiteraryForm, Genre, Book, BookSeries, Author) {

        function SamLib(mainPageUrl, immediateLoad) {
            mainPageUrl = _(mainPageUrl).isUndefined() ? 'http://samlib.ru' : _(mainPageUrl).trim('/');
            immediateLoad = _(immediateLoad).isUndefined() ? true : immediateLoad;

            this._info = {};
            this.pages = {
                MainPage: MainPage,
                AuthorIndex: AuthorIndex,
                LiteraryForm: LiteraryForm,
                Genre: Genre,
                Book: Book,
                BookSeries: BookSeries,
                Author: Author
            };

            this.mainpage = new MainPage(mainPageUrl, immediateLoad);
            this.ready = this.mainpage.ready;
            this.url = this.mainpage.url;
        }

        var result = {

            load: function () {
                this.mainpage.load();
            },

            normalizeUrl: function (url) {
                if (!_(url).startsWith(this.url)) {
                    if (_(url).startsWith('/')) {
                        url = this.url + url;
                    } else {
                        url = this.url + '/' + url;
                    }
                }
                return url.replace(/[\/]{2,}/gi,'/').replace('http:/', 'http://');
            },

            getPageObject: function (url, immediateLoad) {
                immediateLoad = _(immediateLoad).isUndefined() ? true : immediateLoad;
                var result = {
                    type: this.determinePageTypeByUrl(url)
                }
                if (result.type !== 'Unknown') {
                    result.page = new (this.pages[result.type])(url, immediateLoad);
                }
                return result;
            },

            determinePageTypeByUrl: function (url) {
                url = this.normalizeUrl(url);
                if (!_(url).startsWith(this.url)) {
                    return 'Unknown';
                }

                //Mainpage
                if (url === this.url || url === this.url + '/') {
                    return 'MainPage';
                }

                //AuthorIndex
                var isAuthorIndex = _(this.mainpage.info().authorIndexes).find({url: url});
                if (isAuthorIndex) {
                    return 'AuthorIndex';
                }

                //Genres
                var re = new RegExp('^' + this.url + '/janr/index_janr_[\\d]+?-[\\d]+?.shtml$');
                if (re.test(url)) {
                    return 'Genre';
                }

                //Literary forms
                var re = new RegExp('^' + this.url + '/type/index_type_[\\d]+?-[\\d]+?.shtml$');
                if (re.test(url)) {
                    return 'LiteraryForm';
                }

                //Authors
                var re = new RegExp('^' + this.url + '/[^/]+?/[^/]+?/(|index\\.shtml|indexvote\\.shtml|indexdate\\.shtml)$');
                if (re.test(url)) {
                    return 'Author';
                }

                //BookSerie
                var re = new RegExp('^' + this.url + '/[^/]+?/[^/]+?/index_[\\d]+?\\.shtml$');
                if (re.test(url)) {
                    return 'BookSeries';
                }

                //Book
                var re = new RegExp('^' + this.url + '/[^/]+?/[^/]+?/[^/]+?\\.shtml$');
                if (re.test(url)) {
                    return 'Book';
                }

                return 'Unknown';
            },

            info: function (data, replace) {
                data = data || false;
                if (data) {
                    replace = replace || false;
                    if (replace) {
                        this._info = data;
                    } else {
                        _.extend(this._info, data);
                    }
                }
                return this._info;
            }
        };

        _.extend(SamLib.prototype, result);

        return SamLib;
    }
);
